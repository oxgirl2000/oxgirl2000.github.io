---
import { Image } from "astro:assets";
interface Props {
  title: string;
  year: number;
  collaborator: string;
  body: string;
  href?: string;
  image?: string;
  arrow?: string;
  titleSize?: string;
}

const {
  title,
  year,
  collaborator,
  body,
  href = "",
  image,
  arrow = "",
  titleSize = "1rem",
} = Astro.props;

const imageUrl = "/public" + image;
// console.log("image:", image);
// const arrow = Astro.props.arrow ?? "";
// const titleSize = Astro.props.titleSize ?? "1rem";
---

<a href={href}>
  <div class="box link-card">
    {
      !!image && (
        <img src={image} alt="." />
        // <div class="image">
        // </div>
      )
    }
    <div class="grid">
      <div class="info">
        <div class="infoText">
          <p class="title">
            {title}
          </p>
          <!-- <hr/> -->
          <p class="collaborator">
            {year}
            {collaborator !== "none" && <span>, {collaborator}</span>}
          </p>
        </div>
        <div class="arrow">{arrow}</div>
      </div>
      <div class="desc">
        <p>
          {body}
        </p>
      </div>
    </div>
  </div>
</a>

<style define:vars={{ titleSize, imageUrl }}>
  :root {
    /* --imgHeight: minmax(120px, 360px); */
    --imgInlineWidth: 120px;
    --gridMinWidth: 240px;
  }
  .link-card {
    display: flex;
    flex-flow: row wrap;
    /* justify-content: stretch; */
    gap: var(--padding);
    background-color: var(--ox-bg);
    transition: var(--transition);
    padding: var(--padding);
    overflow: hidden;
  }

  img {
    width: 100%;

    border-radius: var(--border-radius);
    border: var(--border);
    flex-basis: var(--imgInlineWidth);
    flex-grow: 1;
  }

  .image {
    /* height: var(--imgHeight); */
    /* width: minmax(120px, 100%); */
    /* width: var(--imgHeight); */
    /* flex-basis: var(--imgHeight); */

    /* background-image: url(var(--imageUrl)); */
    /* background-size: cover; */
    /* background-position: center; */

    /* border-radius: var(--border-radius); */
    /* border: var(--border); */
    /* overflow: hidden; */
  }

  .grid {
    /* width: calc(var(--imgHeight) * 2); */
    flex-basis: var(--gridMinWidth);
    display: flex;
    /* flex-wrap: wrap; */
    flex-direction: column;
    gap: var(--padding);
    align-items: stretch;
    flex-grow: 3;
  }

  .info {
    /* flex-shrink: 2; */

    display: flex;
    flex-flow: row;
    justify-content: space-evenly;
    align-items: center;
    /* align-content: stretch; */

    border-left: var(--border);
    border-color: var(--ox-pink);
    padding-left: var(--padding);

    transition: var(--transition);
  }

  .infoText {
    text-align: left;
    flex-grow: 1;
  }

  .arrow {
    /* justify-self: flex-end; */
    display: block;
    color: var(--ox-pink);
    padding: 0.2rem 0.6rem;
    padding: auto;
    transition: var(--transition);
  }

  .desc {
    flex-grow: 1;
    /* min-width: 40ch; */
  }

  .title {
    display: inline;
    margin: 0;
    font-weight: bold;
    text-decoration: underline 1px var(--ox-magenta);
    transition: 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    font-size: var(--titleSize);
  }

  .collaborator {
    font-size: 0.8rem;
    font-style: italic;
    color: var(--ox-magenta);
  }

  .desc {
    font-size: 0.8rem;
  }

  hr {
    border-color: var(--ox-pink);
  }

  li,
  p {
    /* margin-top: 0.5rem; */
    /* margin-bottom: 0; */
    margin: 0;
  }

  /* For some reason, the container works on desktop browser simulation, */
  /* but not on actual mobile browser. */
  /* @container mobile (min-width: 0) { */
  @media screen and (max-width: 720px) {
    .link-card {
      /* flex-direction: column; */
    }

    .grid {
    }

    .info {
    }

    .infoText {
      /* flex-grow: 1; */
    }
  }

  .link-card:is(:hover, :focus-within) {
    /* border: var(--border); */
    border-color: var(--ox-orange);

    .info {
      border-color: var(--ox-orange);
      /* text-decoration-color: var(--ox-orange); */
    }

    .arrow {
      color: var(--ox-orange);
    }
  }
</style>
