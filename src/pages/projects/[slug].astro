---
import Base from "@/layouts/Base";
import CardWide from "@/components/CardWide";
import Toc from "@/components/Toc";

import { Debug } from "astro:components";

export async function getStaticPaths() {
  const allProjects = await Astro.glob("/src/content/projects/**/*.md");
  return allProjects.map((p) => ({
    params: { slug: p.frontmatter.slug },
    props: { project: p },
  }));
}

const { frontmatter: fm, Content, getHeadings } = Astro.props.project;

const headings = getHeadings();
const toc = buildToc(headings);

type Heading = {
  depth: number;
  text: string;
  subheadings?: Heading[];
};
function buildToc(headings: Heading[]) {
  const toc: Heading[] = [];
  const parentHeadings = new Map();
  headings.forEach((h: Heading) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}
---

<!-- <script> --><!--   // console.log(headings); --><!-- </script> -->
<Base title={fm.title}>
  <section class="sectionCard">
    <CardWide project={fm} titleSize="1.6rem" />
  </section>

  <section title="sectionTable">
    <div class="toc">
      {!fm.isDraft && <Toc headings={toc} />}
    </div>
  </section>

  <section title="sectionBody">
    <div class="text">
      <div>
        {(!fm.isDraft && <Content />) || <p class="wipMessage" />}
      </div>
    </div>
  </section>

  <!-- <div class="box"> -->
  <!--   {contents} -->
  <!-- </div> -->
  <!-- <Debug {contents} /> -->
</Base>

<style>
  :root {
    --marginToc: calc(var(--padding) * 2);
  }
  .sectionCard {
    display: grid;
    /* grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr)); */
    /* gap: var(--padding); */
    /* padding: 0; */
  }
  .wipMessage {
    margin: 4rem 4rem;
    text-align: center;
  }

  .toc {
    margin: var(--marginToc) var(--padding);
  }
  a {
    text-decoration: underline var(--ox-magenta);
    transition: var(--transition);
  }

  a:hover {
    text-decoration-color: var(--ox-orange);
  }
</style>
